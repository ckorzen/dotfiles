# ==============================================================================
# COLORS

# Enable colors, so that programs like vim know how many colors they can use.
if [ "$TERM" == "xterm" ]; then
	export TERM=xterm-256color
fi


# Check for availability of __git_ps1
if ! type -t __git_ps1 &>/dev/null; then
	alias __git_ps1="git branch 2>/dev/null | grep '*' | sed 's/* \(.*\)/(\1)/'"
fi

# Color stuff
if type -t tput &> /dev/null 2>&1 && [[ $(tput -T$TERM colors) -ge 8 ]]; then
  NONE="\[\e[0m\]"
  USER_COLOR="\[\033[01;38;5;25m\]"
  CTRL_COLOR="\[\033[38;5;240m\]"
  HOST_COLOR="\[\033[38;5;89m\]"
  PATH_COLOR="\[\033[38;5;245m\]"
  GIT_COLOR="\[\033[38;5;147m\]"
  ARR_COLOR="\[\033[01;38;5;240m\]"
  
# Style the prompt.
	PS1="${USER_COLOR}\u${NONE}${CTRL_COLOR}@${NONE}${HOST_COLOR}\h${NONE}${CTRL_COLOR}:${NONE}${PATH_COLOR}\w${NONE}${GIT_COLOR}\$(__git_ps1)${NONE}\n${ARR_COLOR}â†³${NONE} "

	# Enable color support for ls and also add handy aliases.
	if [ -x /usr/bin/dircolors ]; then
		test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
		alias ls='ls --color=auto'

		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	fi

	# Enable color for grep and diff.
	alias grep='grep --color=auto'
	alias diff='colordiff'

	# Show last return code if not null.
	EC() { echo -e '\e[1;31m'$?'\e[m'; }
	trap EC ERR

	# Style the git log graph.
	if type -t git &> /dev/null; then
		git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
	fi
fi

# ==============================================================================
# HISTORY

# Do not put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend
PROMPT_COMMAND="history -a;$PROMPT_COMMAND"

# Expand history size, see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=20000
HISTFILESIZE=20000

# ==============================================================================
# ALERTS

set bell-style none

# Add an "alert" alias for long running commands. Use like so: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# ==============================================================================
# ALIASES

alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

cheat() { 
    curl "https://cheat.sh/"$1;
}

alias q='exit'
alias open='xdg-open'
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'
alias cd..='cd ..'

# Clear the terminal and scrollback buffer.
alias x='printf "\033c"'

# cd into the old directory
alias bd='cd "$OLDPWD"'

# Go op N levels. Use like so: ".. N"
function .. (){
    local arg=${1:-1};
    local dir=""
    while [ $arg -gt 0 ]; do
        dir="../$dir"
        arg=$(($arg - 1));
    done
    cd $dir
}

# mkdir && cd
function md () {
	mkdir -p "$@" && cd "$@";
}

# Extract whatever archive.
extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)	tar xvjf $1		;;
			*.tar.gz)	tar xvzf $1		;;
			*.bz2)		bunzip2 $1		;;
			*.rar)		unrar x $1		;;
			*.gz)		gunzip $1		;;
			*.tar)		tar xvf $1		;;
			*.tbz2)		tar xvjf $1		;;
			*.tgz)		tar xvzf $1		;;
			*.zip)		unzip $1		;;
			*.Z)		uncompress $1	;;
			*.7z)		7z x $1			;;
			*)			echo "don't know how to extract '$1'..." ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

# Searches for text in all files in the current folder
ftext () {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp() {
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

# ==============================================================================

# Set the title of the terminal.
export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/\~}\007"'
